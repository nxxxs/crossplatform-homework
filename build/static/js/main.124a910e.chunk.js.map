{"version":3,"sources":["Proxy.ts","EventProducer.ts","TextInput.tsx","Login.tsx","ConversationCard.tsx","LeftPane.tsx","MessageCard.tsx","RightPane.tsx","Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["proxy","ws","inbox","WebSocket","addEventListener","e","p","JSON","parse","data","console","log","type","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","packet","this","send","stringify","listeners","listener","obj","splice","findIndex","args","filter","call","Error","TextInputAndButton","textInput","React","createRef","props","onClick","current","state","value","setState","className","ref","onEnter","buttonContent","Component","TextInput","focus","attrs","autofocus","autoFocus","onKeyDown","keyCode","onChange","target","onBlur","onFocus","placeholder","Login","email","password","displayName","register","displayNameTextInput","src","width","emailChange","href","preventDefault","newEmail","sendPacket","staySignedIn","ConversationCard","lastMessage","length","selected","onSelect","name","Date","timeStamp","toLocaleDateString","content","m","forceUpdate","removeAllEventListener","LeftPane","user","tag","text","sendContactRequest","map","key","selectedConversation","firstMessage","c","MessageCard","own","PureComponent","RightPane","referenceTo","contentType","onBack","id","senderId","onSend","Main","undefined","App","logged_in","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.124a910e.chunk.js","sourcesContent":["\nimport { IncomingPacket, OutgoingPacket, InboxDto, MessageDto } from './chat.d'\n\nimport { EventProducer } from './EventProducer'\n\ninterface ProxyEventMap {\n    \"login\": () => void;\n    \"message\": (channelId: string, message: MessageDto) => void;\n    \"conversation\": (channelId: string) => void;\n}\n\nclass Proxy extends EventProducer<ProxyEventMap> {\n    private ws: WebSocket;\n    inbox: InboxDto | null = null;\n    constructor() {\n        super();\n        this.ws = new WebSocket(/*\"ws://echo.websocket.org/\"*/ \"wss://raja.aut.bme.hu/chat/\");\n        this.ws.addEventListener(\"open\", () => {\n\n        });\n        this.ws.addEventListener(\"message\", e => {\n            let p = <IncomingPacket>JSON.parse(e.data);\n            console.log(p);\n            switch (p.type) {\n                case \"error\":\n                    alert(p.message);\n                    break;\n                case \"login\":\n                    this.inbox = p.inbox;\n                    this.dispatch( \"login\" );\n                    break;\n                case \"message\":\n                    let cid = p.channelId;\n                    this.inbox!.conversations.find(x => x.channelId === cid)?.lastMessages.push(p.message);\n                    this.dispatch(\"message\", cid, p.message);\n                    break;\n                case \"conversationAdded\":\n                    this.inbox!.conversations.push(p.conversation);\n                    this.dispatch(\"conversation\", p.conversation.channelId);\n                    break;\n                default:\n                    console.log(p);\n            }\n        });\n    }\n\n    sendPacket(packet: OutgoingPacket) {\n        this.ws.send(JSON.stringify(packet));\n    }\n\n}\nexport var proxy = new Proxy();","\nexport class EventProducer<M> {\n    private listeners: { type: keyof M, listener : any, obj?: Object }[] = [];\n    addEventListener<K extends keyof M>(type: K, listener: M[K], obj?: Object) {\n        this.listeners.push({ type, listener, obj });\n    }\n    removeEventListener<K extends keyof M>(type: K, listener: M[K]) {\n        this.listeners.splice(this.listeners.findIndex(x => x.type === type && x.listener === listener), 1);\n    }\n\n    protected dispatch<K extends keyof M>(type: K, ...args : any) {\n        for (let listener of this.listeners.filter(x => x.type === type))\n            listener.listener.call(listener.obj, ...args);\n    }\n\n    removeAllEventListener(obj: Object) {\n        if (!obj)\n            throw new Error(\"Must specify object\");\n        this.listeners = this.listeners.filter(x => x.obj !== obj);\n    }\n}","import React, { Component } from 'react';\nimport './TextInput.css'\n\nexport interface TextInputOptions {\n    value?: string;\n    onChange?: (value: string) => void;\n    type?: \"text\" | \"password\" | \"email\";\n    placeholder?: string;\n    onEnter?: () => void;\n    autofocus?: boolean;\n};\n\nexport interface TextInputAndButtonOptions extends TextInputOptions {\n    buttonContent?: string;\n    onClick?: (text: string) => boolean | void;\n}\n\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions>\n{\n    textInput = React.createRef<TextInput>();\n\n    onClick() {\n        if (this.props.onClick?.(this.textInput.current?.state.value ?? \"\")) {\n            this.textInput.current?.setState({ value: \"\" });\n        }\n    }\n\n    render() {\n        return <div className=\"text-input-and-button\">\n            <TextInput {...this.props} ref={this.textInput} onEnter={() => this.onClick()} />\n            <button type=\"button\" onClick={() => this.onClick()}>\n                {this.props.buttonContent}\n            </button>\n        </div>\n    }\n}\n\n\nexport class TextInput extends Component<TextInputOptions> {\n    state = { value: this.props.value, focus: false };\n    render() {\n\n        let attrs = {} as any;\n        if (this.props.autofocus)\n            attrs.autoFocus = true;\n        if (this.props.onEnter)\n            attrs.onKeyDown = e => {\n                if (e.keyCode === 13)\n                    this.props.onEnter!();\n            };\n\n        return (\n            <div className=\"text-input\">\n                <input {...attrs} type={this.props.type ?? \"text\"} value={this.state.value}\n                    onChange={e => {\n                        this.setState({ value: e.target.value });\n                        this.props.onChange?.(e.target.value);\n                    }}\n                    onBlur={() => this.setState({ focus: false })}\n                    onFocus={() => this.setState({ focus: true })} />\n                <div className=\"focus-indicator\"></div>\n                <label className={this.state.value || this.state.focus ? \"subsided\" : \"\"}>\n                    {this.props.placeholder}\n                </label>\n            </div>);\n    }\n}","\n\n\nimport React, { Component } from 'react';\n\nimport { proxy } from './Proxy';\n\nimport { TextInput } from './TextInput';\n\nexport class Login extends Component {\n    state = { email: \"\", password: \"\", displayName: \"\", register: false };\n    displayNameTextInput = React.createRef<TextInput>();\n    render() {\n        return (\n            <div className=\"login\">\n                <img src=\"logo512.png\" width=\"256\" />\n                <TextInput type=\"email\" placeholder=\"Email (someone@example.com)\" value={this.state.email} onChange={e => this.emailChange(e) } onEnter={ () => this.onClick() } autofocus={ true } />\n                <TextInput type=\"password\" placeholder=\"Password\" value={this.state.password} onChange={e => this.setState({ password: e })} onEnter={ () => this.onClick() } autofocus={ true }/>\n                {this.state.register &&\n                    <TextInput type=\"text\" ref={this.displayNameTextInput} placeholder=\"Display Name (Agent Smith)\" value={this.state.displayName}\n                        onChange={e => this.setState({ displayName: e })} onEnter={ () => this.onClick() } autofocus={ true } />}\n                <button type=\"button\" onClick={() => this.onClick()}>\n                    {this.state.register ? \"Register\" : \"Login\"}\n                </button>\n                <p>{this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \"}\n                    <a href=\"\" onClick={e => { e.preventDefault(); this.setState({ register: !this.state.register }); }}>\n                        {this.state.register ? \"Login\" : \"Register\"}\n                    </a>\n                </p>\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\n            </div>);\n    }\n\n    emailChange(newEmail) {\n        this.setState({ email: newEmail });\n        if(newEmail === \"HCNIQ7\") {\n            this.displayNameTextInput.current?.setState({ value: \"Petya\"});\n        }\n    }\n\n    onClick() {\n        if (this.state.register)\n            proxy.sendPacket({\n                type: \"register\", email: this.state.email, password: this.state.password,\n                displayName: this.state.displayName, staySignedIn: false\n            });\n        else\n            proxy.sendPacket({\n                type: \"login\", email: this.state.email, password: this.state.password,\n                staySignedIn: false\n            });\n    }\n}","\nimport React, { Component } from 'react';\nimport { IncomingPacket, ConversationDto, InboxDto } from './chat.d'\nimport { proxy } from './Proxy';\nexport class ConversationCard extends Component<{\n    conversation: ConversationDto,\n    selected: boolean,\n    onSelect: () => void\n}>\n{\n    render() {\n        let lastMessage = this.props.conversation.lastMessages.length > 0 ?\n            this.props.conversation.lastMessages[this.props.conversation.lastMessages.length - 1] : null;\n        return (\n            <div className={\"conversation-card\" + (this.props.selected ? \" selected\" : \"\")}\n                onClick={() => this.props.onSelect()}>\n                <div className=\"row\">\n                    <span className=\"channel-name\">{this.props.conversation.name}</span>\n                    <span className=\"time\">\n                        {lastMessage && new Date(lastMessage.timeStamp).toLocaleDateString()}\n                    </span>\n                </div>\n                <span className=\"last-message\">{lastMessage?.content}</span>\n            </div>\n        );\n    }\n\n    componentDidMount() {\n        proxy.addEventListener(\"message\", (cid, m) => {\n            if (cid === this.props.conversation.channelId)\n                this.forceUpdate();\n        }, this);\n    }\n    componentWillUnmount() {\n        proxy.removeAllEventListener(this);\n    }\n\n}","import React, { Component } from 'react';\nimport { TextInputAndButton } from './TextInput';\nimport { proxy } from './Proxy';\nimport { IncomingPacket, ConversationDto, InboxDto } from './chat.d'\nimport { ConversationCard } from './ConversationCard';\n\n\n\nexport class LeftPane extends Component<{\n    inbox: InboxDto, selectedConversation: ConversationDto | undefined,\n    onSelect: (c: ConversationDto) => void\n}>\n{\n    render() {\n        return (\n            <div className=\"left-pane\">\n                <p className=\"my-tag\">My tag: {this.props.inbox.user.tag}</p>\n                <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\"\n                    buttonContent=\"Inv\"\n                    onClick={text => this.sendContactRequest(text)} />\n                <div className=\"conversations\">\n                    {this.props.inbox.conversations.map(x =>\n                        <ConversationCard\n                            key={x.channelId}\n                            conversation={x}\n                            selected={x === this.props.selectedConversation}\n                            onSelect={() => this.props.onSelect(x)} />)}\n                </div>\n            </div>\n        );\n    }\n\n    sendContactRequest(email: string) {\n        proxy.sendPacket({ type: \"contactRequest\", email, firstMessage: \"Hello\" });\n        return true;\n    }\n\n    componentDidMount() {\n        proxy.addEventListener(\"conversation\", c => this.forceUpdate(), this);\n    }\n    componentWillUnmount() {\n        proxy.removeAllEventListener(this);\n    }\n}","\nimport React, { PureComponent } from 'react';\n\nimport { MessageDto } from './chat.d'\n\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }>\n{\n    render() {\n        return (\n            <div className={\"message-card\" + (this.props.own ? \" own\" : \"\")}>\n                <div className=\"bubble\">\n                    <span className=\"text\">{this.props.message.content}</span>\n                    <span className=\"time\">\n                        {new Date(this.props.message.timeStamp).toLocaleDateString()}\n                    </span>\n                </div>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\n\nimport { ConversationDto } from './chat.d'\n\nimport { TextInputAndButton } from './TextInput';\n\nimport { proxy } from './Proxy';\n\nimport { MessageCard } from './MessageCard'\n\n\nexport class RightPane extends Component<{ conversation?: ConversationDto, onBack: () => void }>\n{\n    componentDidMount() {\n        proxy.addEventListener(\"message\", (cid, m) => {\n            if (cid === this.props.conversation?.channelId)\n                this.forceUpdate();\n        }, this);\n    }\n\n    componentWillUnmount() {\n        proxy.removeAllEventListener(this);\n    }\n\n    onSend(text: string) {\n        proxy.sendPacket({ type: \"message\", channelId: this.props.conversation!.channelId, referenceTo: 0, contentType: 0, content: \"H: \" + text });\n        return true;\n    }\n\n    render() {\n        return (\n            <div className=\"right-pane column\">\n                {this.props.conversation &&\n                    <>\n                        <div className=\"conversation-header row\">\n                            <button type=\"button\" className=\"only-narrow\"\n                                onClick={() => this.props.onBack()}>Back</button>\n                            <p>{this.props.conversation?.name}</p>\n                        </div>\n                        <div className=\"messages\">\n                            {this.props.conversation?.lastMessages.map(x =>\n                                <MessageCard key={x.id} message={x}\n                                    own={x.senderId === proxy.inbox?.user.id} />)}\n                        </div>\n                        <div className=\"send-message row\">\n                            <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\"\n                                buttonContent=\"Send\" onClick={x => this.onSend(x)} />\n                        </div>\n                    </>\n                }\n            </div>\n        );\n    }\n}","\nimport React, { Component } from 'react';\nimport { proxy } from './Proxy';\nimport { LeftPane } from './LeftPane';\nimport { RightPane } from './RightPane';\nimport { ConversationDto } from './chat.d'\n\nexport class Main extends Component {\n    state = { selectedConversation: undefined as (ConversationDto | undefined) };\n    render() {\n        let className = \"main row \" + (this.state.selectedConversation ? \"right\" : \"left\");\n        return (\n            <div className={className}>\n                <LeftPane\n                    inbox={proxy.inbox!}\n                    selectedConversation={this.state.selectedConversation}\n                    onSelect={c => this.setState({ selectedConversation: c })} />\n                <RightPane conversation={this.state.selectedConversation}\n                    onBack={() => this.setState({ selectedConversation: undefined })} />\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\n\nimport { Login } from './Login'\nimport { Main } from './Main'\nimport { proxy } from './Proxy';\n\nexport class App extends Component {\n  state = { logged_in: false };\n  constructor(props) {\n    super(props);\n    proxy.addEventListener(\"login\", () => {\n      this.setState({ logged_in: true });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        {this.state.logged_in ? <Main /> : <Login />}\n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}